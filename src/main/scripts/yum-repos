#!/usr/bin/env python
import glob
import json
import os
import shutil
import subprocess

from flask import Flask, request, abort, send_file
from werkzeug import secure_filename


app = Flask(__name__)

app.config['ALLOWED_EXTENSIONS'] = set(['rpm'])
app.config['REPOS_FOLDER'] = os.path.abspath('repos/')
app.config['SERVE_STATIC_FILES'] = True
app.config['CREATEREPO_BIN'] = 'createrepo_c'


@app.before_first_request
def init_env():
    try:
        os.mkdir(app.config['REPOS_FOLDER'])
    except OSError as e:
        if e.errno != 17:
            raise


def allowed_file(filename):
    return '.' in filename and \
        filename.rsplit('.', 1)[1] in app.config['ALLOWED_EXTENSIONS']


if app.config['SERVE_STATIC_FILES']:
    @app.route('/repos', methods=['GET'])
    def get_repos():
        return json.dumps(os.listdir(app.config['REPOS_FOLDER']), indent=4)

    @app.route('/repos/<reponame>', methods=['GET'])
    def get_repo(reponame):
        return json.dumps(glob.glob(os.path.join(app.config['REPOS_FOLDER'], reponame, '*.rpm')), indent=4)

    @app.route('/repos/<reponame>/<rpmname>', methods=['GET'])
    def get_rpm(reponame, rpmname):
        filename = os.path.join(app.config['REPOS_FOLDER'], reponame, rpmname)
        return send_file(filename)

    @app.route('/repos/<reponame>/repodata/<filename>')
    def serve_repodata(reponame, filename):
        static_filename = os.path.join(app.config['REPOS_FOLDER'], reponame, 'repodata', filename)
        return send_file(static_filename)


@app.route('/admin/repos/<reponame>', methods=['PUT'])
def create_repo(reponame):
    try:
        os.mkdir(os.path.join(app.config['REPOS_FOLDER'], reponame))
    except OSError as e:
        if e.errno != 17:
            raise
    create_repo_metadata(reponame)
    return ('', 201)


@app.route('/admin/repos/<reponame>', methods=['DELETE'])
def remove_repo(reponame):
    repopath = os.path.join(app.config['REPOS_FOLDER'], reponame)
    if not os.path.exists(repopath):
        abort(404)
    if len(glob.glob(os.path.join(repopath, "*.rpm"))) > 0:
        return "repo not empty, aborting", 409
    try:
        shutil.rmtree(repopath)
    except OSError as e:
        if e.errno == 39:
            abort(409)
        raise
    return ('', 204)


def create_repo_metadata(reponame):
    subprocess.check_call([app.config['CREATEREPO_BIN'], os.path.join(app.config['REPOS_FOLDER'], reponame)])


@app.route('/admin/repos/<reponame>', methods=['POST'])
def upload_rpm(reponame):
    file = request.files['rpm']
    if file and allowed_file(file.filename):
        filename = secure_filename(file.filename)
        complete_filename = os.path.join(app.config['REPOS_FOLDER'], reponame, filename)
        if os.path.exists(complete_filename):
            return "%s already exists" % file.filename, 409
        try:
            file.save(complete_filename)
            create_repo_metadata(reponame)
            return ('', 201)
        except IOError as e:
            if e.errno == 2:
                abort(404)
    return "%s not a valid rpm" % file.filename, 400


@app.route('/admin/repos/<reponame>/<rpmname>', methods=['DELETE'])
def remove_rpm(reponame, rpmname):
    filename = os.path.join(app.config['REPOS_FOLDER'], reponame, rpmname)
    try:
        os.unlink(filename)
        create_repo_metadata(reponame)
    except OSError as e:
        if e.errno == 2:
            abort(404)
        raise
    return ('', 204)


if __name__ == '__main__':
    app.run(
        host="0.0.0.0",
        port=int("8080"),
        debug=True
    )
